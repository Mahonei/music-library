@model IEnumerable<MusicManager.Presentation.ASPMVC.MusicLibrary.Models.SongModel>
<script>
    var onWrite = function (store, operation) {
        var record = operation.getRecords()[0],
            name = Ext.String.capitalize(operation.action),
            verb;


        if (name == 'Destroy') {
            record = operation.records[0];
            verb = 'Destroyed';
        } else {
            verb = name + 'd';
        }
        Ext.net.Notification.show({ title: name, html: Ext.String.format("{0} Song: {1}<br/>{2}", verb, record.getId(), operation.resultSet.message) });
    };
</script>
@(
 Html.X().GridPanel()
            .Icon(Icon.Table)
            .Frame(true)
            .Title("Songs")
            .Width(700)
            .Height(400)
            .Store(
                Html.X().StoreForModel().AutoLoad(true).Control(s =>
                {

                    s.AutoSync = true;
                    s.Proxy.Add(
                        new RestProxy
                        {

                            AppendAction = false,
                            Reader = { 
                                new JsonReader {
                                    Root = "data",
                                    MessageProperty = "message"
                                }
                            },
                            API =
                            {

                                Read = Url.Action("Read", "Music", new { list = ViewBag.List }),
                                Update = Url.Action("Update", "Music"),
                                Create = Url.Action("Create", "Music"),
                                Destroy = Url.Action("Destroy", "Music")
                            },
                            Writer = {
                                new JsonWriter
                                {
                                    AllowSingle = true
                                }
                            }
                        }
                    );
                    s.Listeners.Write.Fn = "onWrite";
                })
            )
            .ColumnModel(
                Html.X().ColumnFor(Model, m => m.Id)
                    .ToBuilder<Column.Builder>()
                    .Width(40)
                    .Hidden(true),

               Html.X().ColumnFor(Model, m => m.Title)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().TextField().AllowBlank(false)
                    ),

               Html.X().ColumnFor(Model, m => m.Author)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().TextField().AllowBlank(false)
                    ),
                    Html.X().ColumnFor(Model, m => m.Album)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().TextField().AllowBlank(false)
                    ),
                    Html.X().ColumnFor(Model, m => m.Genre)
                    .ToBuilder<Column.Builder>()
                    .Flex(1)
                    .Editor(
                        Html.X().ComboBox().Items(

                          new ListItem("Dance", "Dance"),
                          new ListItem("HipHop", "HipHop"),
                          new ListItem("Pop", "Pop"),
                          new ListItem("Rock", "Rock")


                        ).Editable(false).AllowBlank(false)
                    )
            )
            .TopBar(
                Html.X().Toolbar()
                    .Items(
                        Html.X().Button()
                            .Text("Add")
                            .Icon(Icon.Add)
                            .Handler("this.up('grid').store.insert(0, new Song());this.up('grid').editingPlugin.startEdit(0, 0);"),

                        Html.X().Button()
                            .ItemID("btnRemove")
                            .Text("Delete")
                            .Icon(Icon.Exclamation)
                            .Handler("this.up('grid').deleteSelected();"),

                        Html.X().Button()
                            .ItemID("btnRefresh")
                            .Icon(Icon.TableRefresh)
                            .Handler("this.up('grid').store.load();")


                    )
            )
            .Plugins(
                Html.X().RowEditing()
                    .Listeners(l =>
                    {
                        l.CancelEdit.Handler = "if(e.record.phantom){e.store.remove(e.record);}";
                    })
            )

    )